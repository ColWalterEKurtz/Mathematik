clear all;

%%% addpath 'Octave/';

%%% NO CALCULATIONS YET %%%

printf("\\begin{exercise}\n");
printf("      {ID-635ab33cfc36b9e3d9bdd5592ce591522c736bb5}\n");
printf("      {Farbenblind}\n");
printf("  \\ifproblem\\problem\\par\n");
printf("    %% <PROBLEM>\n");
printf("    In einer Bevölkerung sind \\pc{4} aller Männer farbenblind. Wie groß muss\n");
printf("    eine Gruppe von Männern mindestens sein, damit man mit einer Wahrscheinlichkeit von\n");
printf("    mindestens \\pc{50} davon ausgehen kann, dass mindestens ein farbenblinder Mann dabei ist?\n");
printf("    %% </PROBLEM>\n");
printf("  \\fi\n");
printf("  %%\\ifoutline\\outline\\par\n");
printf("    %% <OUTLINE>\n");
printf("    %% </OUTLINE>\n");
printf("  %%\\fi\n");
printf("  \\ifoutcome\\outcome\\par\n");
printf("    %% <OUTCOME>\n");
printf("    In dieser Aufgabe ist die Höhe des Baumdiagramms gesucht.\n");
printf("    Die folgende Abbildung zeigt den Anfang eines möglichen\n");
printf("    Baumdiagramms. Farbenblinde Männer sind mit einem\n");
printf("    \\glqq f\\grqq{} gekennzeichnet, normalsichtige mit\n");
printf("    einem \\glqq n\\grqq.\n");
printf("    \\begin{center}\n");
printf("      %%<OCTAVE>\n");
printf("      \\begin{tikzpicture}[line width=0.6pt]\n");
printf("        %% tree\n");
printf("        \\begin{scope}\n");
printf("          %% some default colors\n");
printf("          \\newcommand{\\colr}{Red};%%\n");
printf("          \\newcommand{\\colg}{ForestGreen};%%\n");
printf("          \\newcommand{\\colb}{Cerulean};%%\n");
printf("          \\newcommand{\\coly}{YellowOrange};%%\n");
printf("          \\newcommand{\\cola}{Black!35!White};%%\n");
printf("          \\newcommand{\\cole}{Black!55!White};%%\n");
printf("          %% size settings\n");
printf("          \\newcommand{\\radius}{3mm}%%\n");
printf("          \\newcommand{\\xscale}{3}%%\n");
printf("          \\newcommand{\\yscale}{4}%%\n");
printf("          %% background color of nodes\n");
printf("          \\newcommand{\\colora}{white}%%\n");
printf("          \\newcommand{\\colorb}{white}%%\n");
printf("          %% default node text\n");
printf("          \\newcommand{\\ntexta}{f}%%\n");
printf("          \\newcommand{\\ntextb}{n}%%\n");
printf("          %% default edge text\n");
printf("          \\newcommand{\\etexta}{$\\frac{1}{2}$}%%\n");
printf("          \\newcommand{\\etextb}{$\\frac{1}{2}$}%%\n");
printf("          %% geometry\n");
printf("          \\coordinate (Z)    at ( 7.500*\\xscale*\\radius,  4.000*\\yscale*\\radius);\n");
printf("          \\coordinate (A)    at ( 3.500*\\xscale*\\radius,  3.000*\\yscale*\\radius);\n");
printf("          \\coordinate (B)    at (11.500*\\xscale*\\radius,  3.000*\\yscale*\\radius);\n");
printf("          \\coordinate (AA)   at ( 1.500*\\xscale*\\radius,  2.000*\\yscale*\\radius);\n");
printf("          \\coordinate (AB)   at ( 5.500*\\xscale*\\radius,  2.000*\\yscale*\\radius);\n");
printf("          \\coordinate (BA)   at ( 9.500*\\xscale*\\radius,  2.000*\\yscale*\\radius);\n");
printf("          \\coordinate (BB)   at (13.500*\\xscale*\\radius,  2.000*\\yscale*\\radius);\n");
printf("          \\coordinate (AAA)  at ( 0.500*\\xscale*\\radius,  1.000*\\yscale*\\radius);\n");
printf("          \\coordinate (AAB)  at ( 2.500*\\xscale*\\radius,  1.000*\\yscale*\\radius);\n");
printf("          \\coordinate (ABA)  at ( 4.500*\\xscale*\\radius,  1.000*\\yscale*\\radius);\n");
printf("          \\coordinate (ABB)  at ( 6.500*\\xscale*\\radius,  1.000*\\yscale*\\radius);\n");
printf("          \\coordinate (BAA)  at ( 8.500*\\xscale*\\radius,  1.000*\\yscale*\\radius);\n");
printf("          \\coordinate (BAB)  at (10.500*\\xscale*\\radius,  1.000*\\yscale*\\radius);\n");
printf("          \\coordinate (BBA)  at (12.500*\\xscale*\\radius,  1.000*\\yscale*\\radius);\n");
printf("          \\coordinate (BBB)  at (14.500*\\xscale*\\radius,  1.000*\\yscale*\\radius);\n");
printf("          \\coordinate (AAAA) at ( 0.000*\\xscale*\\radius,  0.000*\\yscale*\\radius);\n");
printf("          \\coordinate (AAAB) at ( 1.000*\\xscale*\\radius,  0.000*\\yscale*\\radius);\n");
printf("          \\coordinate (AABA) at ( 2.000*\\xscale*\\radius,  0.000*\\yscale*\\radius);\n");
printf("          \\coordinate (AABB) at ( 3.000*\\xscale*\\radius,  0.000*\\yscale*\\radius);\n");
printf("          \\coordinate (ABAA) at ( 4.000*\\xscale*\\radius,  0.000*\\yscale*\\radius);\n");
printf("          \\coordinate (ABAB) at ( 5.000*\\xscale*\\radius,  0.000*\\yscale*\\radius);\n");
printf("          \\coordinate (ABBA) at ( 6.000*\\xscale*\\radius,  0.000*\\yscale*\\radius);\n");
printf("          \\coordinate (ABBB) at ( 7.000*\\xscale*\\radius,  0.000*\\yscale*\\radius);\n");
printf("          \\coordinate (BAAA) at ( 8.000*\\xscale*\\radius,  0.000*\\yscale*\\radius);\n");
printf("          \\coordinate (BAAB) at ( 9.000*\\xscale*\\radius,  0.000*\\yscale*\\radius);\n");
printf("          \\coordinate (BABA) at (10.000*\\xscale*\\radius,  0.000*\\yscale*\\radius);\n");
printf("          \\coordinate (BABB) at (11.000*\\xscale*\\radius,  0.000*\\yscale*\\radius);\n");
printf("          \\coordinate (BBAA) at (12.000*\\xscale*\\radius,  0.000*\\yscale*\\radius);\n");
printf("          \\coordinate (BBAB) at (13.000*\\xscale*\\radius,  0.000*\\yscale*\\radius);\n");
printf("          \\coordinate (BBBA) at (14.000*\\xscale*\\radius,  0.000*\\yscale*\\radius);\n");
printf("          \\coordinate (BBBB) at (15.000*\\xscale*\\radius,  0.000*\\yscale*\\radius);\n");
printf("          %% edges\n");
printf("          \\draw   (Z) -- (A);\n");
printf("          \\draw   (Z) -- (B);\n");
printf("          \\draw   (A) -- (AA);\n");
printf("          \\draw   (A) -- (AB);\n");
printf("          \\draw   (B) -- (BA);\n");
printf("          \\draw   (B) -- (BB);\n");
printf("          \\draw  (AA) -- (AAA);\n");
printf("          \\draw  (AA) -- (AAB);\n");
printf("          \\draw  (AB) -- (ABA);\n");
printf("          \\draw  (AB) -- (ABB);\n");
printf("          \\draw  (BA) -- (BAA);\n");
printf("          \\draw  (BA) -- (BAB);\n");
printf("          \\draw  (BB) -- (BBA);\n");
printf("          \\draw  (BB) -- (BBB);\n");
printf("          \\draw (AAA) -- (AAAA);\n");
printf("          \\draw (AAA) -- (AAAB);\n");
printf("          \\draw (AAB) -- (AABA);\n");
printf("          \\draw (AAB) -- (AABB);\n");
printf("          \\draw (ABA) -- (ABAA);\n");
printf("          \\draw (ABA) -- (ABAB);\n");
printf("          \\draw (ABB) -- (ABBA);\n");
printf("          \\draw (ABB) -- (ABBB);\n");
printf("          \\draw (BAA) -- (BAAA);\n");
printf("          \\draw (BAA) -- (BAAB);\n");
printf("          \\draw (BAB) -- (BABA);\n");
printf("          \\draw (BAB) -- (BABB);\n");
printf("          \\draw (BBA) -- (BBAA);\n");
printf("          \\draw (BBA) -- (BBAB);\n");
printf("          \\draw (BBB) -- (BBBA);\n");
printf("          \\draw (BBB) -- (BBBB);\n");
printf("          %% root\n");
printf("          \\fill[fill=black] (Z) circle[radius=2pt];\n");
printf("          %% nodes\n");
printf("          \\filldraw[fill=\\colora, draw=black] (A)    circle[radius=\\radius] node{\\ntexta};\n");
printf("          \\filldraw[fill=\\colorb, draw=black] (B)    circle[radius=\\radius] node{\\ntextb};\n");
printf("          \\filldraw[fill=\\colora, draw=black] (AA)   circle[radius=\\radius] node{\\ntexta};\n");
printf("          \\filldraw[fill=\\colorb, draw=black] (AB)   circle[radius=\\radius] node{\\ntextb};\n");
printf("          \\filldraw[fill=\\colora, draw=black] (BA)   circle[radius=\\radius] node{\\ntexta};\n");
printf("          \\filldraw[fill=\\colorb, draw=black] (BB)   circle[radius=\\radius] node{\\ntextb};\n");
printf("          \\filldraw[fill=\\colora, draw=black] (AAA)  circle[radius=\\radius] node{\\ntexta};\n");
printf("          \\filldraw[fill=\\colorb, draw=black] (AAB)  circle[radius=\\radius] node{\\ntextb};\n");
printf("          \\filldraw[fill=\\colora, draw=black] (ABA)  circle[radius=\\radius] node{\\ntexta};\n");
printf("          \\filldraw[fill=\\colorb, draw=black] (ABB)  circle[radius=\\radius] node{\\ntextb};\n");
printf("          \\filldraw[fill=\\colora, draw=black] (BAA)  circle[radius=\\radius] node{\\ntexta};\n");
printf("          \\filldraw[fill=\\colorb, draw=black] (BAB)  circle[radius=\\radius] node{\\ntextb};\n");
printf("          \\filldraw[fill=\\colora, draw=black] (BBA)  circle[radius=\\radius] node{\\ntexta};\n");
printf("          \\filldraw[fill=\\colorb, draw=black] (BBB)  circle[radius=\\radius] node{\\ntextb};\n");
printf("          \\filldraw[fill=\\colora, draw=black] (AAAA) circle[radius=\\radius] node{\\ntexta};\n");
printf("          \\filldraw[fill=\\colorb, draw=black] (AAAB) circle[radius=\\radius] node{\\ntextb};\n");
printf("          \\filldraw[fill=\\colora, draw=black] (AABA) circle[radius=\\radius] node{\\ntexta};\n");
printf("          \\filldraw[fill=\\colorb, draw=black] (AABB) circle[radius=\\radius] node{\\ntextb};\n");
printf("          \\filldraw[fill=\\colora, draw=black] (ABAA) circle[radius=\\radius] node{\\ntexta};\n");
printf("          \\filldraw[fill=\\colorb, draw=black] (ABAB) circle[radius=\\radius] node{\\ntextb};\n");
printf("          \\filldraw[fill=\\colora, draw=black] (ABBA) circle[radius=\\radius] node{\\ntexta};\n");
printf("          \\filldraw[fill=\\colorb, draw=black] (ABBB) circle[radius=\\radius] node{\\ntextb};\n");
printf("          \\filldraw[fill=\\colora, draw=black] (BAAA) circle[radius=\\radius] node{\\ntexta};\n");
printf("          \\filldraw[fill=\\colorb, draw=black] (BAAB) circle[radius=\\radius] node{\\ntextb};\n");
printf("          \\filldraw[fill=\\colora, draw=black] (BABA) circle[radius=\\radius] node{\\ntexta};\n");
printf("          \\filldraw[fill=\\colorb, draw=black] (BABB) circle[radius=\\radius] node{\\ntextb};\n");
printf("          \\filldraw[fill=\\colora, draw=black] (BBAA) circle[radius=\\radius] node{\\ntexta};\n");
printf("          \\filldraw[fill=\\colorb, draw=black] (BBAB) circle[radius=\\radius] node{\\ntextb};\n");
printf("          \\filldraw[fill=\\colora, draw=black] (BBBA) circle[radius=\\radius] node{\\ntexta};\n");
printf("          \\filldraw[fill=\\colorb, draw=black] (BBBB) circle[radius=\\radius] node{\\ntextb};\n");
printf("          %% label macros\n");
printf("          \\newcommand{\\rlabel}[4]%%\n");
printf("          {%%\n");
printf("            \\coordinate (TEMP) at ($(#1)!0.5!(#2)$);\n");
printf("            \\coordinate (TEMP) at ($(TEMP)!#3!270:(#2)$);\n");
printf("            \\node at (TEMP) {#4};\n");
printf("          }%%\n");
printf("          \\newcommand{\\llabel}[4]{\\rlabel{#2}{#1}{#3}{#4}};\n");
printf("          %% edge labels\n");
printf("          \\rlabel{Z}{A}{3mm}{\\pc{4}};\n");
printf("          \\llabel{Z}{B}{3mm}{\\pc{96}};\n");
printf("          \\rlabel{A}{AA}{4.5mm}{\\rule{0pt}{2.5ex}\\pc{4}};\n");
printf("          \\llabel{A}{AB}{4.5mm}{\\rule{0pt}{2.5ex}\\pc{96}};\n");
printf("          \\rlabel{B}{BA}{4.5mm}{\\rule{0pt}{2.5ex}\\pc{4}};\n");
printf("          \\llabel{B}{BB}{4.5mm}{\\rule{0pt}{2.5ex}\\pc{96}};\n");
printf("          \\rlabel{AA}{AAA}{3mm}{};\n");
printf("          \\llabel{AA}{AAB}{3mm}{};\n");
printf("          \\rlabel{AB}{ABA}{3mm}{};\n");
printf("          \\llabel{AB}{ABB}{3mm}{};\n");
printf("          \\rlabel{BA}{BAA}{3mm}{};\n");
printf("          \\llabel{BA}{BAB}{3mm}{};\n");
printf("          \\rlabel{BB}{BBA}{3mm}{};\n");
printf("          \\llabel{BB}{BBB}{3mm}{};\n");
printf("          \\rlabel{AAA}{AAAA}{3mm}{};\n");
printf("          \\llabel{AAA}{AAAB}{3mm}{};\n");
printf("          \\rlabel{AAB}{AABA}{3mm}{};\n");
printf("          \\llabel{AAB}{AABB}{3mm}{};\n");
printf("          \\rlabel{ABA}{ABAA}{3mm}{};\n");
printf("          \\llabel{ABA}{ABAB}{3mm}{};\n");
printf("          \\rlabel{ABB}{ABBA}{3mm}{};\n");
printf("          \\llabel{ABB}{ABBB}{3mm}{};\n");
printf("          \\rlabel{BAA}{BAAA}{3mm}{};\n");
printf("          \\llabel{BAA}{BAAB}{3mm}{};\n");
printf("          \\rlabel{BAB}{BABA}{3mm}{};\n");
printf("          \\llabel{BAB}{BABB}{3mm}{};\n");
printf("          \\rlabel{BBA}{BBAA}{3mm}{};\n");
printf("          \\llabel{BBA}{BBAB}{3mm}{};\n");
printf("          \\rlabel{BBB}{BBBA}{3mm}{};\n");
printf("          \\llabel{BBB}{BBBB}{3mm}{};\n");
printf("          %% path numbers\n");
printf("          \\node[below=\\radius] at (AAAA) {$\\vdots$};\n");
printf("          \\node[below=\\radius] at (AAAB) {$\\vdots$};\n");
printf("          \\node[below=\\radius] at (AABA) {$\\vdots$};\n");
printf("          \\node[below=\\radius] at (AABB) {$\\vdots$};\n");
printf("          \\node[below=\\radius] at (ABAA) {$\\vdots$};\n");
printf("          \\node[below=\\radius] at (ABAB) {$\\vdots$};\n");
printf("          \\node[below=\\radius] at (ABBA) {$\\vdots$};\n");
printf("          \\node[below=\\radius] at (ABBB) {$\\vdots$};\n");
printf("          \\node[below=\\radius] at (BAAA) {$\\vdots$};\n");
printf("          \\node[below=\\radius] at (BAAB) {$\\vdots$};\n");
printf("          \\node[below=\\radius] at (BABA) {$\\vdots$};\n");
printf("          \\node[below=\\radius] at (BABB) {$\\vdots$};\n");
printf("          \\node[below=\\radius] at (BBAA) {$\\vdots$};\n");
printf("          \\node[below=\\radius] at (BBAB) {$\\vdots$};\n");
printf("          \\node[below=\\radius] at (BBBA) {$\\vdots$};\n");
printf("          \\node[below=\\radius] at (BBBB) {$\\vdots$};\n");
printf("          \\begin{scope}%%[line width=0.6pt]\n");
printf("            \\draw[decorate, decoration=brace]\n");
printf("            ([xshift=\\radius, yshift=-4.0*\\radius]BBBA)\n");
printf("            -- node[below=3pt] {diese Pfade enthalten alle mindestens ein \\glqq f\\grqq}\n");
printf("            ([xshift=-\\radius, yshift=-4.0*\\radius]AAAA);\n");
printf("          \\end{scope}\n");
printf("        \\end{scope}\n");
printf("      \\end{tikzpicture}\n");
printf("      %%</OCTAVE>\n");
printf("      %%mytree(2,4)\n");
printf("    \\end{center}\n");
printf("    Wenn in der Gruppe mindestens ein farbenblinder\n");
printf("    Mann dabei sein soll, dann führt nur der Pfad,\n");
printf("    der ausschließlich aus normalsichtigen Mannern\n");
printf("    besteht, nicht zum Ziel.\n");
printf("    Sobald also die Pfadwahrscheinlichkeit dieses Pfades\n");
printf("    auf \\pc{50} oder etwas darunter gesunken ist,\n");
printf("    befindet sich in der Gruppe mit mindestens\n");
printf("    \\pc{50}-iger Wahrscheinlichkeit mindestens ein\n");
printf("    farbenblinder Mann.\n");
printf("    \\begin{equation*}\n");
printf("      \\begin{split}\n");
printf("        P(\\text{nnn}\\ldots)&=\\frac{96}{100}\\cdot\\frac{96}{100}\\cdot\\frac{96}{100}\\cdot\\;\\cdots\n");
printf("        \\\\[1ex]\n");
printf("        \\left(\\frac{96}{100}\\right)^{16}&\\approx\\num{0.520403}\n");
printf("        \\\\[1ex]\n");
printf("        \\left(\\frac{96}{100}\\right)^{17}&\\approx\\num{0.499587}\n");
printf("        %%for i = 15:18\n");
printf("          %%printf(\"i=%%d, %%8.6f\\n\", i, (96/100)^i)\n");
printf("        %%endfor\n");
printf("        %%log(0.5)/log(0.96)\n");
printf("      \\end{split}\n");
printf("    \\end{equation*}\n");
printf("    Wenn man 17 Männer aus der Bevölkerung auswählt,\n");
printf("    dann ist die Wahrscheinlichkeit nur normalsichtige\n");
printf("    Männer ausgewählt zu haben auf ca. \\pc{50} gesunken.\n");
printf("    Also ist mit \\pc{50}-iger Wahrscheinlichkeit\n");
printf("    mindestens ein farbenblinder Mann dabei.\n");
printf("    %% --------------------\n");
printf("    \\paragraph{Bemerkung:}\n");
printf("    %% --------------------\n");
printf("    Eigentlich handelt es sich bei diesem\n");
printf("    Auswahlprozess um ein Zufallsexperiment vom Typ\n");
printf("    \\emph{Ziehen ohne Zurücklegen}, also um ein\n");
printf("    Expriment, bei dem sich in jedem Schritt die\n");
printf("    Wahrscheinlichkeiten ändern.\n");
printf("    Man geht aber davon aus, dass die Bevölkerung\n");
printf("    so groß ist, dass die Auswahl von 17 Männern\n");
printf("    noch keinen maßgeblichen Einfluss auf die\n");
printf("    bedingten Wahrscheinlichkeiten hat.\n");
printf("    %% </OUTCOME>\n");
printf("  \\fi\n");
printf("\\end{exercise}\n");

%%% rmpath 'Octave/';

