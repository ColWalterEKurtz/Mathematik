clear all;

addpath 'Octave/';

function [DF ZF ZE A1 A2 CE ZC ZD CD AC BD ZCA EFDC] = calculate(x, y, z, a, b)

  % gegeben
  DF   = a * y;
  ZF   = a * z;
  ZE   = z;
  A1   = (x * y) / 2;
  A2   = b * (a * x - x);
  % berechnet
  CE   = DF * ZE / ZF;
  ZC   = 2 * A1 / CE;
  ZD   = ZF * ZC / ZE;
  CD   = ZD - ZC;
  AC   = 2 * A2 * ZC / (CD * (ZC + ZD));
  BD   = (2 * A2 - AC * CD) / CD;
  ZCA  = ZC * AC / 2;
  EFDC = (CE + DF) / 2 * CD;

endfunction

ax = 4;
ay = 3;
az = 5;
aa = 3;
ab = 7;
[aDF aZF aZE aA1 aA2 aCE aZC aZD aCD aAC aBD aZCA aEFDC] = calculate(ax, ay, az, aa, ab);
ins_aDF   = texnum(aDF);
ins_aZF   = texnum(aZF);
ins_aZE   = texnum(aZE);
ins_aA1   = texnum(aA1);
ins_aA2   = texnum(aA2);
ins_aCE   = texnum(aCE);
ins_aZC   = texnum(aZC);
ins_aZD   = texnum(aZD);
ins_aCD   = texnum(aCD);
ins_aAC   = texnum(aAC);
ins_aBD   = texnum(aBD);
ins_aZCA  = texnum(aZCA);
ins_aEFDC = texnum(aEFDC);

bx = 12;
by = 5;
bz = 13;
ba = 3;
bb = 7;
[bDF bZF bZE bA1 bA2 bCE bZC bZD bCD bAC bBD bZCA bEFDC] = calculate(bx, by, bz, ba, bb);
ins_bDF   = texnum(bDF);
ins_bZF   = texnum(bZF);
ins_bZE   = texnum(bZE);
ins_bA1   = texnum(bA1);
ins_bA2   = texnum(bA2);
ins_bCE   = texnum(bCE);
ins_bZC   = texnum(bZC);
ins_bZD   = texnum(bZD);
ins_bCD   = texnum(bCD);
ins_bAC   = texnum(bAC);
ins_bBD   = texnum(bBD);
ins_bZCA  = texnum(bZCA);
ins_bEFDC = texnum(bEFDC);

cx = 15;
cy = 8;
cz = 17;
ca = 4;
cb = 8;
[cDF cZF cZE cA1 cA2 cCE cZC cZD cCD cAC cBD cZCA cEFDC] = calculate(cx, cy, cz, ca, cb);
ins_cDF   = texnum(cDF);
ins_cZF   = texnum(cZF);
ins_cZE   = texnum(cZE);
ins_cA1   = texnum(cA1);
ins_cA2   = texnum(cA2);
ins_cCE   = texnum(cCE);
ins_cZC   = texnum(cZC);
ins_cZD   = texnum(cZD);
ins_cCD   = texnum(cCD);
ins_cAC   = texnum(cAC);
ins_cBD   = texnum(cBD);
ins_cZCA  = texnum(cZCA);
ins_cEFDC = texnum(cEFDC);

dx = 28;
dy = 45;
dz = 53;
da = 4;
db = 5;
[dDF dZF dZE dA1 dA2 dCE dZC dZD dCD dAC dBD dZCA dEFDC] = calculate(dx, dy, dz, da, db);
ins_dDF   = texnum(dDF);
ins_dZF   = texnum(dZF);
ins_dZE   = texnum(dZE);
ins_dA1   = texnum(dA1);
ins_dA2   = texnum(dA2);
ins_dCE   = texnum(dCE);
ins_dZC   = texnum(dZC);
ins_dZD   = texnum(dZD);
ins_dCD   = texnum(dCD);
ins_dAC   = texnum(dAC);
ins_dBD   = texnum(dBD);
ins_dZCA  = texnum(dZCA);
ins_dEFDC = texnum(dEFDC);

%ACalt = (A2 * ZE^3 * DF) / (A1 * ZF^3 - A1 * ZE^2 * ZF);
%Falt = (A2 * ZE^2) / (ZF^2 - ZE^2);

[drawDF drawZF drawZE drawA1 drawA2 drawCE drawZC drawZD drawCD drawAC drawBD drawF] = calculate(12, 5, 13, 3, 6);

printf("\\begin{exercise}\n");
printf("      {ID-b96dc040e048801db14192b261242b371c7aedba}\n");
printf("      {Strahlensatz und Flächen}\n");
printf("  \\ifproblem\\problem\n");
printf("    Das Dreieck $ZEC$ besitzt den Flächeninhalt $A_1$ und das Trapez $CDBA$\n");
printf("    ist $A_2$ Flächeneinheiten groß. Bestimme die Fläche des Dreiecks $ZCA$\n");
printf("    und die des Trapezes $EFDC$.\\par\n");
printf("    \\begin{minipage}{7cm}%%\n");
printf("      \\begin{tikzpicture}[scale=0.15]\n");
printf("        \\coordinate (Z) at (%.3f, %.3f);\n", 0, 0);
printf("        \\coordinate (C) at (%.3f, %.3f);\n", drawZC,  0);
printf("        \\coordinate (D) at (%.3f, %.3f);\n", drawZD,  0);
printf("        \\coordinate (A) at (%.3f, %.3f);\n", drawZC,  drawAC);
printf("        \\coordinate (B) at (%.3f, %.3f);\n", drawZD,  drawBD);
printf("        \\coordinate (E) at (%.3f, %.3f);\n", drawZC, -drawCE);
printf("        \\coordinate (F) at (%.3f, %.3f);\n", drawZD, -drawDF);
printf("        %% areas\n");
printf("        \\fill[fill=black!20!white] (Z) -- (E) -- (C) -- cycle;\n");
printf("        \\fill[fill=black!20!white] (C) -- (D) -- (B) -- (A) -- cycle;\n");
printf("        %% points\n");
printf("        \\fill (Z) circle[radius=6pt] node[left]{$Z$};\n");
printf("        \\fill (A) circle[radius=6pt] node[above left] {\\small$A$};\n");
printf("        \\fill (B) circle[radius=6pt] node[above left] {\\small$B$};\n");
printf("        \\fill (C) circle[radius=6pt] node[below left] {\\small$C$};\n");
printf("        \\fill (D) circle[radius=6pt] node[below left] {\\small$D$};\n");
printf("        \\fill (E) circle[radius=6pt] node[below left] {\\small$E$};\n");
printf("        \\fill (F) circle[radius=6pt] node[below left] {\\small$F$};\n");
printf("        %% lines\n");
printf("        \\draw (Z) -- (B) -- ($(B)!4cm!180:(Z)$);\n");
printf("        \\draw (Z) -- (D) -- ($(D)!4cm!180:(Z)$);\n");
printf("        \\draw (Z) -- (F) -- ($(F)!4cm!180:(Z)$);\n");
printf("        %% parallels\n");
printf("        \\draw (C) -- (A) -- ($(A)!4cm!180:(C)$);\n");
printf("        \\draw (C) -- (E) -- ($(E)!4cm!180:(C)$);\n");
printf("        \\draw (D) -- (B) -- ($(B)!4cm!180:(D)$);\n");
printf("        \\draw (D) -- (F) -- ($(F)!4cm!180:(D)$);\n");
printf("        %% angles\n");
printf("        \\begin{scope}\n");
printf("          \\clip (C) -- (E) -- (F) -- (D) -- cycle;\n");
printf("          \\draw (C) circle[radius=3cm];\n");
printf("          \\fill ([shift={(315:1.5cm)}]C) circle[radius=6pt];\n");
printf("        \\end{scope}\n");
printf("        \\begin{scope}\n");
printf("          \\clip (A) -- (C) -- (D) -- (B) -- cycle;\n");
printf("          \\draw (D) circle[radius=3cm];\n");
printf("          \\fill ([shift={(135:1.5cm)}]D) circle[radius=6pt];\n");
printf("        \\end{scope}\n");
printf("      \\end{tikzpicture}%%\n");
printf("    \\end{minipage}%%\n");
printf("    \\hfill\n");
printf("    \\begin{minipage}{8cm}%%\n");
printf("      \\raggedleft\n");
printf("      \\newcommand{\\vstrut}{\\vphantom{\\ensuremath{\\displaystyle\\Big(}}}%%\n");
printf("      \\renewcommand{\\arraystretch}{1.1}%%\n");
printf("      \\newcommand{\\nbox}[1]{\\makebox[2.5em][c]{#1}}%%\n");
printf("      \\begin{tabular}{|l|c|c|c|c|}\n");
printf("        \\hline\n");
printf("                        & \\nbox{a)} & \\nbox{b)} & \\nbox{c)} & \\nbox{d)} \\\\\n");
printf("        \\hline\n");
printf("        $\\overline{ZE}$ & %s & %s & %s & %s \\\\\n", ins_aZE, ins_bZE, ins_cZE, ins_dZE);
printf("        \\hline\n");
printf("        $\\overline{ZF}$ & %s & %s & %s & %s \\\\\n", ins_aZF, ins_bZF, ins_cZF, ins_dZF);
printf("        \\hline\n");
printf("        $\\overline{DF}$ & %s & %s & %s & %s \\\\\n", ins_aDF, ins_bDF, ins_cDF, ins_dDF);
printf("        \\hline\n");
printf("        $A_1$           & %s & %s & %s & %s \\\\\n", ins_aA1, ins_bA1, ins_cA1, ins_dA1);
printf("        \\hline\n");
printf("        $A_2$           & %s & %s & %s & %s \\\\\n", ins_aA2, ins_bA2, ins_cA2, ins_dA2);
printf("        \\hline\n");
printf("      \\end{tabular}\n");
printf("    \\end{minipage}\n");
printf("  \\fi\n");
printf("  \\ifoutline\\outline\n");
printf("    \\begin{minipage}{7cm}%%\n");
printf("      \\begin{tikzpicture}[scale=0.15]\n");
printf("        \\coordinate (Z) at (%.3f, %.3f);\n", 0, 0);
printf("        \\coordinate (C) at (%.3f, %.3f);\n", drawZC,  0);
printf("        \\coordinate (D) at (%.3f, %.3f);\n", drawZD,  0);
printf("        \\coordinate (A) at (%.3f, %.3f);\n", drawZC,  drawAC);
printf("        \\coordinate (B) at (%.3f, %.3f);\n", drawZD,  drawBD);
printf("        \\coordinate (E) at (%.3f, %.3f);\n", drawZC, -drawCE);
printf("        \\coordinate (F) at (%.3f, %.3f);\n", drawZD, -drawDF);
printf("        %% areas\n");
printf("        \\fill[fill=black!20!white] (Z) -- (E) -- (C) -- cycle;\n");
printf("        \\fill[fill=black!20!white] (C) -- (D) -- (B) -- (A) -- cycle;\n");
printf("        %% points\n");
printf("        \\fill (Z) circle[radius=6pt] node[left]{$Z$};\n");
printf("        \\fill (A) circle[radius=6pt] node[above left] {\\small$A$};\n");
printf("        \\fill (B) circle[radius=6pt] node[above left] {\\small$B$};\n");
printf("        \\fill (C) circle[radius=6pt] node[below left] {\\small$C$};\n");
printf("        \\fill (D) circle[radius=6pt] node[below left] {\\small$D$};\n");
printf("        \\fill (E) circle[radius=6pt] node[below left] {\\small$E$};\n");
printf("        \\fill (F) circle[radius=6pt] node[below left] {\\small$F$};\n");
printf("        %% lines\n");
printf("        \\draw (Z) -- (B) -- ($(B)!4cm!180:(Z)$);\n");
printf("        \\draw (Z) -- (D) -- ($(D)!4cm!180:(Z)$);\n");
printf("        \\draw (Z) -- (F) -- ($(F)!4cm!180:(Z)$);\n");
printf("        %% parallels\n");
printf("        \\draw (C) -- (A) -- ($(A)!4cm!180:(C)$);\n");
printf("        \\draw (C) -- (E) -- ($(E)!4cm!180:(C)$);\n");
printf("        \\draw (D) -- (B) -- ($(B)!4cm!180:(D)$);\n");
printf("        \\draw (D) -- (F) -- ($(F)!4cm!180:(D)$);\n");
printf("        %% angles\n");
printf("        \\begin{scope}\n");
printf("          \\clip (C) -- (E) -- (F) -- (D) -- cycle;\n");
printf("          \\draw (C) circle[radius=3cm];\n");
printf("          \\fill ([shift={(315:1.5cm)}]C) circle[radius=6pt];\n");
printf("        \\end{scope}\n");
printf("        \\begin{scope}\n");
printf("          \\clip (A) -- (C) -- (D) -- (B) -- cycle;\n");
printf("          \\draw (D) circle[radius=3cm];\n");
printf("          \\fill ([shift={(135:1.5cm)}]D) circle[radius=6pt];\n");
printf("        \\end{scope}\n");
printf("      \\end{tikzpicture}%%\n");
printf("    \\end{minipage}%%\n");
printf("    \\hfill\n");
printf("    \\begin{minipage}{8cm}%%\n");
printf("      \\begin{equation*}\n");
printf("        \\begin{split}\n");
printf("          |ZCA|&=\\frac{\\overline{AC}\\cdot\\overline{ZC}}{2}\\\\[2ex]\n");
printf("          |EFDC|&=\\frac{\\overline{CE}+\\overline{DF}}{2}\\cdot\\overline{CD}\n");
printf("        \\end{split}\n");
printf("      \\end{equation*}\n");
printf("    \\end{minipage}\\par\n");
printf("    \\begin{equation*}\n");
printf("      \\begin{split}\n");
printf("        \\frac{\\overline{CE}}{\\overline{ZE}}=\\frac{\\overline{DF}}{\\overline{ZF}}\n");
printf("        &\\quad\\Rightarrow\\quad\n");
printf("        \\overline{CE}=\\frac{\\overline{DF}\\cdot\\overline{ZE}}{\\overline{ZF}}\n");
printf("        \\\\[2ex]\n");
printf("        A_1=\\frac{\\overline{CE}\\cdot\\overline{ZC}}{2}\n");
printf("        &\\quad\\Rightarrow\\quad\n");
printf("        \\overline{ZC}=\\frac{2A_1}{\\overline{CE}}\n");
printf("        \\\\[2ex]\n");
printf("        \\frac{\\overline{ZD}}{\\overline{ZC}}=\\frac{\\overline{ZF}}{\\overline{ZE}}\n");
printf("        &\\quad\\Rightarrow\\quad\n");
printf("        \\overline{ZD}=\\frac{\\overline{ZF}\\cdot\\overline{ZC}}{\\overline{ZE}}\n");
printf("        \\\\[2ex]\n");
printf("        \\overline{ZD}=\\overline{ZC}+\\overline{CD}\n");
printf("        &\\quad\\Rightarrow\\quad\n");
printf("        \\overline{CD}=\\overline{ZD}-\\overline{ZC}\n");
printf("        \\\\[2ex]\n");
printf("        A_2=\\frac{\\overline{AC}+\\overline{BD}}{2}\\cdot\\overline{CD}\n");
printf("        &\\quad\\Rightarrow\\quad\n");
printf("        \\overline{BD}=\\frac{2A_2-\\overline{AC}\\cdot\\overline{CD}}{\\overline{CD}}\n");
printf("        \\\\[2ex]\n");
printf("        \\frac{\\overline{AC}}{\\overline{ZC}}=\\frac{\\overline{BD}}{\\overline{ZD}}\n");
printf("        &\\quad\\Rightarrow\\quad\n");
printf("        \\overline{AC}=\\frac{2A_2\\cdot\\overline{ZC}}{\\overline{CD}\\cdot\\left(\\overline{ZC}+\\overline{ZD}\\right)}\n");
printf("      \\end{split}\n");
printf("    \\end{equation*}\n");
printf("  \\fi\n");
printf("  \\ifoutcome\\outcome\n");
printf("    \\begingroup\n");
printf("      \\newcommand{\\aZE}{%s}%%\n",   ins_aZE);
printf("      \\newcommand{\\aZF}{%s}%%\n",   ins_aZF);
printf("      \\newcommand{\\aDF}{%s}%%\n",   ins_aDF);
printf("      \\newcommand{\\aZEC}{%s}%%\n",  ins_aA1);
printf("      \\newcommand{\\aCDBA}{%s}%%\n", ins_aA2);
printf("      \\newcommand{\\aCE}{%s}%%\n",   ins_aCE);
printf("      \\newcommand{\\aZC}{%s}%%\n",   ins_aZC);
printf("      \\newcommand{\\aZD}{%s}%%\n",   ins_aZD);
printf("      \\newcommand{\\aCD}{%s}%%\n",   ins_aCD);
printf("      \\newcommand{\\aAC}{%s}%%\n",   ins_aAC);
printf("      \\newcommand{\\aBD}{%s}%%\n",   ins_aBD);
printf("      \\newcommand{\\aZCA}{%s}%%\n",  ins_aZCA);
printf("      \\newcommand{\\aEFDC}{%s}%%\n", ins_aEFDC);
printf("      \\newcommand{\\bZE}{%s}%%\n",   ins_bZE);
printf("      \\newcommand{\\bZF}{%s}%%\n",   ins_bZF);
printf("      \\newcommand{\\bDF}{%s}%%\n",   ins_bDF);
printf("      \\newcommand{\\bZEC}{%s}%%\n",  ins_bA1);
printf("      \\newcommand{\\bCDBA}{%s}%%\n", ins_bA2);
printf("      \\newcommand{\\bCE}{%s}%%\n",   ins_bCE);
printf("      \\newcommand{\\bZC}{%s}%%\n",   ins_bZC);
printf("      \\newcommand{\\bZD}{%s}%%\n",   ins_bZD);
printf("      \\newcommand{\\bCD}{%s}%%\n",   ins_bCD);
printf("      \\newcommand{\\bAC}{%s}%%\n",   ins_bAC);
printf("      \\newcommand{\\bBD}{%s}%%\n",   ins_bBD);
printf("      \\newcommand{\\bZCA}{%s}%%\n",  ins_bZCA);
printf("      \\newcommand{\\bEFDC}{%s}%%\n", ins_bEFDC);
printf("      \\newcommand{\\cZE}{%s}%%\n",   ins_cZE);
printf("      \\newcommand{\\cZF}{%s}%%\n",   ins_cZF);
printf("      \\newcommand{\\cDF}{%s}%%\n",   ins_cDF);
printf("      \\newcommand{\\cZEC}{%s}%%\n",  ins_cA1);
printf("      \\newcommand{\\cCDBA}{%s}%%\n", ins_cA2);
printf("      \\newcommand{\\cCE}{%s}%%\n",   ins_cCE);
printf("      \\newcommand{\\cZC}{%s}%%\n",   ins_cZC);
printf("      \\newcommand{\\cZD}{%s}%%\n",   ins_cZD);
printf("      \\newcommand{\\cCD}{%s}%%\n",   ins_cCD);
printf("      \\newcommand{\\cAC}{%s}%%\n",   ins_cAC);
printf("      \\newcommand{\\cBD}{%s}%%\n",   ins_cBD);
printf("      \\newcommand{\\cZCA}{%s}%%\n",  ins_cZCA);
printf("      \\newcommand{\\cEFDC}{%s}%%\n", ins_cEFDC);
printf("      \\newcommand{\\dZE}{%s}%%\n",   ins_dZE);
printf("      \\newcommand{\\dZF}{%s}%%\n",   ins_dZF);
printf("      \\newcommand{\\dDF}{%s}%%\n",   ins_dDF);
printf("      \\newcommand{\\dZEC}{%s}%%\n",  ins_dA1);
printf("      \\newcommand{\\dCDBA}{%s}%%\n", ins_dA2);
printf("      \\newcommand{\\dCE}{%s}%%\n",   ins_dCE);
printf("      \\newcommand{\\dZC}{%s}%%\n",   ins_dZC);
printf("      \\newcommand{\\dZD}{%s}%%\n",   ins_dZD);
printf("      \\newcommand{\\dCD}{%s}%%\n",   ins_dCD);
printf("      \\newcommand{\\dAC}{%s}%%\n",   ins_dAC);
printf("      \\newcommand{\\dBD}{%s}%%\n",   ins_dBD);
printf("      \\newcommand{\\dZCA}{%s}%%\n",  ins_dZCA);
printf("      \\newcommand{\\dEFDC}{%s}%%\n", ins_dEFDC);
printf("      \\begin{align*}\n");
printf("        \\text{a)}\\qquad\\overline{ZE}&=\\aZE   & \\overline{CE}&=\\aCE & \\overline{CD}&=\\aCD &  |ZCA|&=\\aZCA  \\\\\n");
printf("                       \\overline{ZF}&=\\aZF   & \\overline{ZC}&=\\aZC & \\overline{AC}&=\\aAC & |EFDC|&=\\aEFDC \\\\\n");
printf("                       \\overline{DF}&=\\aDF   & \\overline{ZD}&=\\aZD & \\overline{BD}&=\\aBD &       &        \\\\\n");
printf("                                 A_1&=\\aZEC  &              &      &              &      &       &        \\\\\n");
printf("                                 A_2&=\\aCDBA &              &      &              &      &       &        \\\\[2ex]\n");
printf("        \\text{b)}\\qquad\\overline{ZE}&=\\bZE   & \\overline{CE}&=\\bCE & \\overline{CD}&=\\bCD &  |ZCA|&=\\bZCA  \\\\\n");
printf("                       \\overline{ZF}&=\\bZF   & \\overline{ZC}&=\\bZC & \\overline{AC}&=\\bAC & |EFDC|&=\\bEFDC \\\\\n");
printf("                       \\overline{DF}&=\\bDF   & \\overline{ZD}&=\\bZD & \\overline{BD}&=\\bBD &       &        \\\\\n");
printf("                                 A_1&=\\bZEC  &              &      &              &      &       &        \\\\\n");
printf("                                 A_2&=\\bCDBA &              &      &              &      &       &        \\\\[2ex]\n");
printf("        \\text{c)}\\qquad\\overline{ZE}&=\\cZE   & \\overline{CE}&=\\cCE & \\overline{CD}&=\\cCD &  |ZCA|&=\\cZCA  \\\\\n");
printf("                       \\overline{ZF}&=\\cZF   & \\overline{ZC}&=\\cZC & \\overline{AC}&=\\cAC & |EFDC|&=\\cEFDC \\\\\n");
printf("                       \\overline{DF}&=\\cDF   & \\overline{ZD}&=\\cZD & \\overline{BD}&=\\cBD &       &        \\\\\n");
printf("                                 A_1&=\\cZEC  &              &      &              &      &       &        \\\\\n");
printf("                                 A_2&=\\cCDBA &              &      &              &      &       &        \\\\[2ex]\n");
printf("        \\text{d)}\\qquad\\overline{ZE}&=\\dZE   & \\overline{CE}&=\\dCE & \\overline{CD}&=\\dCD &  |ZCA|&=\\dZCA  \\\\\n");
printf("                       \\overline{ZF}&=\\dZF   & \\overline{ZC}&=\\dZC & \\overline{AC}&=\\dAC & |EFDC|&=\\dEFDC \\\\\n");
printf("                       \\overline{DF}&=\\dDF   & \\overline{ZD}&=\\dZD & \\overline{BD}&=\\dBD &       &        \\\\\n");
printf("                                 A_1&=\\dZEC  &              &      &              &      &       &        \\\\\n");
printf("                                 A_2&=\\dCDBA &              &      &              &      &       &        \\\\[2ex]\n");
printf("      \\end{align*}\n");
printf("    \\endgroup\n");
printf("  \\fi\n");
printf("\\end{exercise}\n");

rmpath 'Octave/';

