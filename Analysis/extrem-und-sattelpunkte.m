clear all;

addpath 'Octave/';

function show_intro(exnum, insf, insdf)
  printf("\n");
  printf("Teilaufgabe %s\n", exnum);
  printf("\\begin{equation*}\n");
  printf("  \\begin{split}\n");
  printf("    f(x)&=%s\n", insf);
  printf("    \\\\[1ex]\n");
  printf("    f'(x)&=%s\n", insdf);
  printf("  \\end{split}\n");
  printf("\\end{equation*}\n");
  printf("Horizontale Tangenten besitzen die Steigung 0, also\n");
  printf("müssen zunächst die Nullstellen der ersten Ableitung\n");
  printf("bestimmt werden:\n");
endfunction

function show_table(p, xi)
  printf("Um die Extem- von den Sattelpunkten unterscheiden zu\n");
  printf("können, nutzt man die Tatsache, dass sich in Sattelpunkten\n");
  printf("das Monotonieverhalten einer Funktion nicht ändert.\n");
  printf("Nullstellen der Ableitung ohne Vorzeichenwechsel\n");
  printf("identifizieren also Sattelpunkte.\n");
  px  = polyval(p, xi);
  dp  = polyder(p);
  dpx = polyval(dp, xi);
  mychktab(xi, px, dpx, 3, "f", "x");
endfunction

function show_plot(p, xmin, xmax, ymin, ymax)
  printf("\\begin{center}\n");
  mypolyplot(p, xmin, xmax, ymin, ymax, 0.1, 0.5);
  printf("\\end{center}\n");
endfunction

function ps = polypoint(p, x, numopt = [0 0 0 0 1])
  maxdcp = numopt(1);
  addbrn = numopt(2);
  addbrf = numopt(3);
  addsgn = numopt(4);
  addtex = numopt(5);
  bl = "(";
  sp = "|";
  br = ")";
  if addtex
    bl = "\\left(";
    sp = "\\;\\middle|\\;";
    br = "\\right)";
  endif
  xs = myn2s(x, maxdcp, addbrn, addbrf, addsgn, addtex);
  ys = myn2s(polyval(p, x), maxdcp, addbrn, addbrf, addsgn, addtex);
  ps = sprintf("%s%s%s%s%s", bl, xs, sp, ys, br);
endfunction

p1 = [                   1/2  -1    -3/2];
p2 = [              1/4  0    -3     0  ];
p3 = [        1/32 -1/6  0     0     0  ];
p4 = [        1/36 -1/3  1     0     0  ];
p5 = [       -1/24 -1/12 1/2   0     0  ];
p6 = [ 1/60  -1/12  0    0     0     0  ];
p7 = [ 1/25   0    -5/12 0     0     1  ];
p8 = [-1/125  0     1/6  0   -25/16  0  ];

insp1 = mypolystr(p1, "x", [0 0 0 0 1]);
insp2 = mypolystr(p2, "x", [0 0 0 0 1]);
insp3 = mypolystr(p3, "x", [0 0 0 0 1]);
insp4 = mypolystr(p4, "x", [0 0 0 0 1]);
insp5 = mypolystr(p5, "x", [0 0 0 0 1]);
insp6 = mypolystr(p6, "x", [0 0 0 0 1]);
insp7 = mypolystr(p7, "x", [0 0 0 0 1]);
insp8 = mypolystr(p8, "x", [0 0 0 0 1]);

dp1 = polyder(p1);
dp2 = polyder(p2);
dp3 = polyder(p3);
dp4 = polyder(p4);
dp5 = polyder(p5);
dp6 = polyder(p6);
dp7 = polyder(p7);
dp8 = polyder(p8);

insdp1 = mypolystr(dp1, "x", [0 0 0 0 1]);
insdp2 = mypolystr(dp2, "x", [0 0 0 0 1]);
insdp3 = mypolystr(dp3, "x", [0 0 0 0 1]);
insdp4 = mypolystr(dp4, "x", [0 0 0 0 1]);
insdp5 = mypolystr(dp5, "x", [0 0 0 0 1]);
insdp6 = mypolystr(dp6, "x", [0 0 0 0 1]);
insdp7 = mypolystr(dp7, "x", [0 0 0 0 1]);
insdp8 = mypolystr(dp8, "x", [0 0 0 0 1]);

printf("\\begin{exercise}\n");
printf("      {ID-bfd94ce82bc953becdd54cffa81b08f870ebc7ee}\n");
printf("      {Extrem- und Sattelpunkte}\n");
printf("  \\ifproblem\\problem\\par\n");
printf("    %% <PROBLEM>\n");
printf("    Bestimmen Sie rechnerisch alle Extrem- und Sattelpunkte des Graphen\n");
printf("    von $f$. Skizzieren Sie anschließend den groben Verlauf des Graphen\n");
printf("    von $f$ mithilfe dieser Informationen und entscheiden Sie jeweils\n");
printf("    für die Extrempunkte, ob es sich um ein lokales oder globales\n");
printf("    Extremum handelt. Überprüfen Sie Ihre Lösungen mit dem GTR.\n");
printf("    \\begin{align*}\n");
printf("      \\text{a)}\\;\\;f(x)&=%s\n", insp1);
printf("      &\n");
printf("      \\text{e)}\\;\\;f(x)&=%s\n", insp5);
printf("      \\\\[1ex]\n");
printf("      \\text{b)}\\;\\;f(x)&=%s\n", insp2);
printf("      &\n");
printf("      \\text{f)}\\;\\;f(x)&=%s\n", insp6);
printf("      \\\\[1ex]\n");
printf("      \\text{c)}\\;\\;f(x)&=%s\n", insp3);
printf("      &\n");
printf("      \\text{g)}\\;\\;f(x)&=%s\n", insp7);
printf("      \\\\[1ex]\n");
printf("      \\text{d)}\\;\\;f(x)&=%s\n", insp4);
printf("      &\n");
printf("      \\text{h)}\\;\\;f(x)&=%s\n", insp8);
printf("    \\end{align*}\n");
printf("    %% </PROBLEM>\n");
printf("  \\fi\n");
printf("  \\ifoutline\\outline\\par\n");
printf("    %% <OUTLINE>\n");
printf("    Eine ganzrationale Funktion $f$ besitzt\n");
printf("    in ihren Extrem- und Sattelpunkten\n");
printf("    horizontale Tangenten.\n");
printf("    Ändert sich an einer dieser Stellen\n");
printf("    zusätzlich das Vorzeichen von $f'$,\n");
printf("    handelt es sich dort um ein Extremum,\n");
printf("    andernfalls um einen Sattelpunkt.\n");
printf("    %% </OUTLINE>\n");
printf("  \\fi\n");
printf("  \\ifoutcome\\outcome\\par\n");
printf("    %% <OUTCOME>");

show_intro("a)", insp1, insdp1);
printf("\\begin{equation*}\n");
printf("  f'(x)=0=%s\n", insdp1);
printf("  \\quad\\Rightarrow\\quad\n");
printf("  x=1\n");
printf("\\end{equation*}\n");
show_table(p1, [0 1 2]);
printf("Die Funktion $f$ besitzt in Punkt ");
printf("$%s$ ", polypoint(p1, 1));
printf("ein globales Minimum.\n");
show_plot(p1, -4, 6, -5, 5);

show_intro("b)", insp2, insdp2);
printf("\\begin{equation*}\n");
printf("  f'(x)=0=%s\n", insdp2);
printf("  \\quad\\Rightarrow\\quad\n");
printf("  x\\in\\{-2;2\\}\n");
printf("\\end{equation*}\n");
show_table(p2, [-3 -2 0 2 3]);
printf("Die Funktion $f$ besitzt in Punkt ");
printf("$%s$ ", polypoint(p2, -2));
printf("ein lokales Maximum und in Punkt ");
printf("$%s$ ", polypoint(p2, 2));
printf("ein lokales Minimum.\n");
show_plot(p2, -5, 5, -5, 5);

show_intro("c)", insp3, insdp3);
printf("\\begin{equation*}\n");
printf("  f'(x)=0\n");
printf("  =%s\n", insdp3);
printf("  =\\frac{\\num{1}}{\\num{8}}x^{2}\\cdot(x-4)\n");
printf("  \\quad\\Rightarrow\\quad\n");
printf("  x\\in\\{0;4\\}\n");
printf("\\end{equation*}\n");
show_table(p3, [-2 0 2 4 6]);
printf("Die Funktion $f$ besitzt in Punkt ");
printf("$%s$ ", polypoint(p3, 0));
printf("einen Sattelpunkt und in Punkt ");
printf("$%s$ ", polypoint(p3, 4));
printf("ein globales Minimum.\n");
show_plot(p3, -3, 7, -5, 5);

show_intro("d)", insp4, insdp4);
printf("\\begin{equation*}\n");
printf("  f'(x)=0\n");
printf("  =%s\n", insdp4);
printf("  =\\frac{1}{9}x\\cdot(x^2-9x+18)\n");
printf("\\end{equation*}\n");
myqsolve(1, -9, 18, 0, "x", [0 0 0 0 1]);
printf("  Es gibt also insgesamt drei Nullstellen:\n");
printf("  \\begin{equation*}\n");
printf("    f'(x)=0=%s\\quad\\Rightarrow\\quad x\\in\\{0;3;6\\}\n", insdp4);
printf("  \\end{equation*}\n");
show_table(p4, [-1 0 1 3 5 6 7]);
printf("Die Funktion $f$ besitzt in den Punkten ");
printf("$%s$ ", polypoint(p4, 0));
printf("und ");
printf("$%s$ ", polypoint(p4, 6));
printf("zwei globale Minima und in Punkt ");
printf("$%s$ ", polypoint(p4, 3));
printf("ein lokales Maximum.\n");
show_plot(p4, -3, 9, -2, 6);

show_intro("e)", insp5, insdp5);
printf("\\begin{equation*}\n");
printf("%%%%f'(x)=0=%s\n", mypolystr(dp5, "x", [0 0 0 0 0]));
printf("  f'(x)=0\n");
printf("  =%s\n", insdp5);
printf("  =-\\frac{1}{6}x\\cdot\\left(x^2+\\frac{3}{2}x-6\\right)\n");
printf("\\end{equation*}\n");
printf("\\begingroup\n");
printf("  \\newcommand{\\vstrut}{\\vphantom{\\left(f_0^0\\right)}}%%\n");
printf("  \\newcommand{\\noeq}{\\phantom{\\Leftrightarrow}\\vstrut&\\quad}%%\n");
printf("  \\newcommand{\\iseq}{\\Leftrightarrow\\vstrut&\\quad}%%\n");
printf("  \\newcommand{\\impl}{\\Rightarrow\\vstrut&\\quad}%%\n");
printf("  \\newcommand{\\nomod}{\\quad&\\phantom{|}}%%\n");
printf("  \\newcommand{\\domod}[1]{\\quad&|#1}%%\n");
printf("  \\begin{alignat*}{3}\n");
printf("    \\noeq\n");
printf("    &\n");
printf("    \\num{0}&=x^{2}+\\frac{\\num{3}}{\\num{2}}x-\\num{6}\n");
printf("    &\n");
printf("    \\domod{\\;\\text{$pq$-Formel}}\n");
printf("    \\\\[1ex]\n");
printf("    \\noeq\n");
printf("    &\n");
printf("    p&=\\frac{\\num{3}}{\\num{2}}\n");
printf("    &\n");
printf("    \\nomod\n");
printf("    \\\\\n");
printf("    \\noeq\n");
printf("    &\n");
printf("    q&=-\\num{6}\n");
printf("    &\n");
printf("    \\nomod\n");
printf("    \\\\\n");
printf("    \\noeq\n");
printf("    &\n");
printf("    x_{1,2}&=-\\frac{p}{2}\\pm\\sqrt{\\left(\\frac{p}{2}\\right)^2-q}\n");
printf("    &\n");
printf("    \\nomod\n");
printf("    \\\\[1ex]\n");
printf("    \\noeq\n");
printf("    &\n");
printf("    &=-\\frac{\\num{3}}{\\num{4}}\\pm\\sqrt{\\left(\\frac{\\num{3}}{\\num{4}}\\right)^2-\\left(-\\num{6}\\right)}\n");
printf("    &\n");
printf("    \\nomod\n");
printf("    \\\\[1ex]\n");
printf("    \\noeq\n");
printf("    &\n");
printf("    &=-\\frac{\\num{3}}{\\num{4}}\\pm\\sqrt{\\frac{\\num{105}}{\\num{16}}}\n");
printf("    &\n");
printf("    \\nomod\n");
printf("    \\\\[1ex]\n");
printf("    \\noeq\n");
printf("    &\n");
printf("    x_1&=-\\frac{\\num{3}}{\\num{4}}-\\frac{\\sqrt{\\num{105}}}{\\num{4}}\n");
printf("    \\approx\n");
printf("    %%<OCTAVE>\n");
printf("    -\\num{3.312}\n");
printf("    %%</OCTAVE>\n");
printf("    %%myn2s(-3/4-sqrt(105)/4, 3, 0, 0, 0, 1)\n");
printf("    &\n");
printf("    \\nomod\n");
printf("    \\\\[1ex]\n");
printf("    \\noeq\n");
printf("    &\n");
printf("    x_2&=-\\frac{\\num{3}}{\\num{4}}+\\frac{\\sqrt{\\num{105}}}{\\num{4}}\n");
printf("    \\approx\n");
printf("    %%<OCTAVE>\n");
printf("    \\num{1.812}\n");
printf("    %%</OCTAVE>\n");
printf("    %%myn2s(-3/4+sqrt(105)/4, 3, 0, 0, 0, 1)\n");
printf("    &\n");
printf("    \\nomod\n");
printf("  \\end{alignat*}\n");
printf("\\endgroup\n");
printf("Es gibt also insgesamt drei Nullstellen:\n");
printf("\\begin{equation*}\n");
printf("  f'(x)=0=%s\n", insdp5);
printf("  \\quad\\Rightarrow\\quad\n");
printf("  x\\in\n");
printf("  \\left\\{\n");
printf("    \\frac{-3-\\sqrt{105}}{4};\n");
printf("    0;\n");
printf("    \\frac{-3+\\sqrt{105}}{4}\n");
printf("  \\right\\}\n");
printf("\\end{equation*}\n");
show_table(p5, [-5 -3/4-sqrt(105)/4 -1 0 1 -3/4+sqrt(105)/4 3]);
printf("Die Funktion $f$ besitzt näherungsweise in Punkt\n");
x1 = -3/4 - sqrt(105)/4;
printf("$%s$ ", polypoint(p5, x1, [3 0 0 0 1]));
printf("ein globales Maximum, in Punkt\n");
printf("$%s$ ", polypoint(p5, 0));
printf("ein lokales Minimum und in Punkt\n");
x2 = -3/4 + sqrt(105)/4;
printf("$%s$ ", polypoint(p5, x2, [3 0 0 0 1]));
printf("ein lokales Maximum.\n");
show_plot(p5, -6, 5, -5, 5);

show_intro("f)", insp6, insdp6);
printf("\\begin{equation*}\n");
printf("  f'(x)=0\n");
printf("  =%s\n", insdp6);
printf("  =\\frac{1}{12}x^3\\cdot(x-4)\n");
printf("  \\quad\\Rightarrow\\quad\n");
printf("  x\\in\\{0;4\\}\n");
printf("\\end{equation*}\n");
show_table(p6, [-2 0 2 4 6]);
printf("Die Funktion $f$ besitzt in Punkt\n");
printf("$%s$ ", polypoint(p6, 0));
printf("ein lokales Maximum und in Punkt\n");
printf("$%s$ ", polypoint(p6, 4));
printf("ein lokales Minimum.\n");
show_plot(p6, -4, 6, -5, 5);

show_intro("g)", insp7, insdp7);
printf("\\begin{equation*}\n");
printf("  \\begin{split}\n");
printf("  f'(x)&=0\n");
printf("  =%s\n", insdp7);
printf("  =\\frac{1}{5}x^2\\cdot\\left(x^2-\\frac{25}{4}\\right)\n");
printf("  =\\frac{1}{5}x^2\\cdot\\left(x-\\frac{5}{2}\\right)\\cdot\\left(x+\\frac{5}{2}\\right)\n");
printf("  \\\\[1ex]\n");
printf("  \\Rightarrow\\;\n");
printf("  x&\\in\\left\\{-\\frac{5}{2};0;\\frac{5}{2}\\right\\}\n");
printf("  \\end{split}\n");
printf("\\end{equation*}\n");
show_table(p7, [-4 -2.5 -1 0 1 2.5 4]);
printf("Die Funktion $f$ besitzt in Punkt\n");
printf("$%s$\n", polypoint(p7, -2.5));
printf("ein lokales Maximum, in Punkt\n");
printf("$%s$\n", polypoint(p7, 0));
printf("einen Sattelpunkt und in Punkt\n");
printf("$%s$\n", polypoint(p7, 2.5));
printf("ein lokales Minimum.\n");
show_plot(p7, -5, 5, -4, 6);

show_intro("h)", insp8, insdp8);
printf("\\begin{equation*}\n");
printf("  \\begin{split}\n");
printf("  f'(x)=0&=%s\n", insdp8);
printf("  \\qquad|\\cdot(-25)\n");
printf("  \\\\[1ex]\n");
printf("  \\Leftrightarrow\\qquad\n");
printf("  0&=x^4-\\frac{25}{2}x^2+\\frac{625}{16}\n");
printf("  \\end{split}\n");
printf("\\end{equation*}\n");
printf("Diese Gleichung löst man mit der Substitution $z\\defeq x^2$:\n");
printf("%%<OCTAVE>\n");
printf("\\begingroup\n");
printf("  \\newcommand{\\vstrut}{\\vphantom{\\left(f_0^0\\right)}}%%\n");
printf("  \\newcommand{\\noeq}{\\phantom{\\Leftrightarrow}\\vstrut&\\quad}%%\n");
printf("  \\newcommand{\\iseq}{\\Leftrightarrow\\vstrut&\\quad}%%\n");
printf("  \\newcommand{\\impl}{\\Rightarrow\\vstrut&\\quad}%%\n");
printf("  \\newcommand{\\nomod}{\\quad&\\phantom{|}}%%\n");
printf("  \\newcommand{\\domod}[1]{\\quad&|#1}%%\n");
printf("  \\begin{alignat*}{3}\n");
printf("    \\noeq\n");
printf("    &\n");
printf("    \\num{0}&=z^{2}-\\frac{\\num{25}}{\\num{2}}z+\\frac{\\num{625}}{\\num{16}}\n");
printf("    &\n");
printf("    \\domod{\\;\\text{$pq$-Formel}}\n");
printf("    \\\\\n");
printf("    \\noeq\n");
printf("    &\n");
printf("    p&=-\\frac{\\num{25}}{\\num{2}}\n");
printf("    &\n");
printf("    \\nomod\n");
printf("    \\\\\n");
printf("    \\noeq\n");
printf("    &\n");
printf("    q&=\\frac{\\num{625}}{\\num{16}}\n");
printf("    &\n");
printf("    \\nomod\n");
printf("    \\\\\n");
printf("    \\noeq\n");
printf("    &\n");
printf("    z_{1,2}&=-\\frac{p}{2}\\pm\\sqrt{\\left(\\frac{p}{2}\\right)^2-q}\n");
printf("    &\n");
printf("    \\nomod\n");
printf("    \\\\\n");
printf("    \\noeq\n");
printf("    &\n");
printf("    &=\\frac{\\num{25}}{\\num{4}}\\pm\\sqrt{\\left(-\\frac{\\num{25}}{\\num{4}}\\right)^2-\\frac{\\num{625}}{\\num{16}}}\n");
printf("    &\n");
printf("    \\nomod\n");
printf("    \\\\\n");
printf("    \\noeq\n");
printf("    &\n");
printf("    &=\\frac{\\num{25}}{\\num{4}}\\pm\\sqrt{\\num{0}}\n");
printf("    &\n");
printf("    \\nomod\n");
printf("    \\\\\n");
printf("    \\impl\n");
printf("    &\n");
printf("    z_1&=z_2=\\frac{\\num{25}}{\\num{4}}=\\num{6.25}\n");
printf("    &\n");
printf("    \\nomod\n");
printf("  \\end{alignat*}\n");
printf("\\endgroup\n");
printf("%%</OCTAVE>\n");
printf("%%myqsolve(1, -25/2, 625/16, 0, \"z\", [0 0 0 0 1]);\n");
printf("Die zugehörigen $x$-Werte erhält man dann durch\n");
printf("folgende Rücksubstitutionen:\n");
printf("\\begin{equation*}\n");
printf("  x_{1,2}=\\pm\\sqrt{z_1}\n");
printf("  \\qquad\\text{und}\\qquad\n");
printf("  x_{3,4}=\\pm\\sqrt{z_2}\n");
printf("\\end{equation*}\n");
printf("In diesem Fall besitzt die erste Ableitung also die beiden Nullstellen:\n");
printf("\\begin{equation*}\n");
printf("  x_{1,2}=x_{3,4}=\\pm\\sqrt{\\frac{25}{4}}\n");
printf("  \\quad\\Rightarrow\\quad\n");
printf("  x\\in\\left\\{-\\frac{5}{2};\\frac{5}{2}\\right\\}\n");
printf("\\end{equation*}\n");
show_table(p8, [-4 -2.5 0 2.5 4]);
printf("Die Funktion $f$ besitzt in den Punkten\n");
printf("$%s$\n", polypoint(p8, -2.5));
printf("und\n");
printf("$%s$\n", polypoint(p8, 2.5));
printf("jeweils einen Sattelpunkt.\n");
show_plot(p8, -5, 5, -5, 5);

printf("    %% </OUTCOME>\n");
printf("  \\fi\n");
printf("\\end{exercise}\n");

rmpath 'Octave/';

